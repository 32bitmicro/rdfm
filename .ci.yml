image: $CI_REGISTRY_IMAGE:rdfm-ci-base

variables:
  PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip

.build:
  before_script:
    - python -V
    - apt update && apt-get -y install make netcat-openbsd openssl telnet
    - cd server && poetry build && poetry install && python -m build && pip3 install -e . && cd ..
    - cd manager && poetry build && poetry install && python -m build && pip3 install -e . && cd ..
    - cd devices/linux-client && sudo make install && cd ../..
    - export JWT_SECRET="testsecret123123123"
    - |
      if [[ $(losetup --list | wc -l) == 0 ]]; then
        dd if=/dev/zero of=blockfile bs=1M count=100
        losetup /dev/loop0 blockfile
        losetup /dev/loop1 blockfile
      fi
    - cp server/tests/etc_rdfm.conf /etc/rdfm/rdfm.conf
    - cat /etc/rdfm/rdfm.conf
    - mkdir /var/lib/rdfm && cp server/tests/etc_rdfm.conf /var/lib/rdfm/rdfm.conf
    - |
      echo "device_type=dummy" > /var/lib/rdfm/device_type
    - chmod -R 777 /etc/rdfm
    - chmod -R 777 /var/lib/rdfm


stages:
  - docs-build
  - docs-deploy
  - build
  - static-checks
  - local-tests

build:
  extends: .build
  stage: build
  script:
    - echo "Build finished"

python-check:
  extends: .build
  stage: static-checks
  script:
    - cd server && poetry run test && cd ..
    - cd manager && poetry run test && cd ..
  only:
    refs:
      - merge_requests
      - main

test-arguments:
  extends: .build
  stage: local-tests
  script:
    - python3 server/tests/test-arguments.py
  only:
    refs:
      - merge_requests
      - main

test-list-devices:
  extends: .build
  stage: local-tests
  script:
    - python3 server/tests/test-list-devices.py
  only:
    refs:
      - merge_requests
      - main

test-proxy:
  extends: .build
  stage: local-tests
  script:
    - |
      echo "shell_connect = true" > 'capabilities.toml'
      echo "file_transfer = false" >> 'capabilities.toml'
      echo "exec_cmds = false" >> 'capabilities.toml'
    - python3 server/tests/test-proxy.py
  only:
    refs:
      - merge_requests
      - main

test-metadata:
  extends: .build
  stage: local-tests
  script:
    - python3 server/tests/test-metadata.py
  only:
    refs:
      - merge_requests
      - main

test-crash-client-input:
  extends: .build
  stage: local-tests
  script:
    - python3 server/tests/test-crash-client-input.py
  only:
    refs:
      - merge_requests
      - main

test-file-transfer:
  extends: .build
  stage: local-tests
  script:
    - echo "file_transfer = true" > 'capabilities.toml'
    - python3 server/tests/test-file-transfer.py
  when: manual
  only:
    refs:
      - merge_requests
      - main
  artifacts:
    when: on_failure
    paths:
    - filetx-server.log
    - filetx-device.log

test-package-api:
  extends: .build
  stage: local-tests
  script:
    - python3 server/tests/test-packages.py
  only:
    refs:
      - merge_requests
      - main

test-group-api:
  extends: .build
  stage: local-tests
  script:
    - cd server
    - pytest tests/test-groups.py
  only:
    refs:
      - merge_requests
      - main

# ===== rdfm-client ===== #

.rdfm-client:
  before_script:
    - export PATH=$HOME/go/bin/:$PATH
    - cd devices/linux-client

build-rdfm-client:
  extends: .rdfm-client
  stage: build
  script:
    - make

test-rdfm-client:
  extends: .rdfm-client
  stage: local-tests
  script:
    # Build and install rdfm-artifact, which is required for the tests
    - cd ../../tools/rdfm-artifact && make && make install && cd ../../devices/linux-client
    - make test
  only:
    refs:
      - merge_requests
      - main

test-rdfm-client-docker:
  extends: .rdfm-client
  stage: local-tests
  script:
    # Build and install rdfm-artifact, which is required for the tests
    - cd ../../tools/rdfm-artifact && make && make install && cd ../../devices/linux-client
    # The tests are running in a Docker container, install and set up
    # the Docker daemon
    - apt update && apt -qq -y --no-install-recommends install docker.io
    - ../../common/docker/start-docker.sh
    # HACK: For CI runs, we have to replace the -it flag in docker run
    #       as this is not a real terminal.
    # HACK: We also comment out git invocations, as only a subfolder is mounted
    #       in the container, which would cause that call to fail. This is fine,
    #       as the invocation is only required when container UID != source UID
    #       (i.e, not in CI runs, where we run everything as root).
    - sed -i "s/\-it//g" ./scripts/test-docker/test-artifact-info.sh
    - sed -i "s/git/#git/g" ./scripts/test-docker/data/check-artifact-info.sh
    - sed -i "s/\-it//g" ./scripts/test-docker/test-deltas.sh
    - sed -i "s/git/#git/g" ./scripts/test-docker/data/check-delta-patching.sh
    # Run rdfm-client Docker tests
    - ./scripts/test-docker/test-artifact-info.sh
    - cd scripts/test-docker/ && ./make-delta-samples.sh && cd ../../
    - ./scripts/test-docker/test-deltas.sh
  only:
    refs:
      - merge_requests
      - main

# ===== rdfm-artifact ===== #

.rdfm-artifact:
  before_script:
    - export PATH=$HOME/go/bin/:$PATH
    - cd tools/rdfm-artifact

build-rdfm-artifact:
  extends: .rdfm-artifact
  stage: build
  script:
    - make

test-rdfm-artifact:
  extends: .rdfm-artifact
  stage: local-tests
  script:
    - make test
  only:
    refs:
      - merge_requests
      - main

# ===== documentation ===== #

docs-build:
  stage: docs-build
  before_script:
    # Disable venvs and just install everything globally
    # The server module must be accessible by Sphinx to
    # properly autogenerate API documentation
    - poetry config virtualenvs.create false
    # Install doc building requirements
    - pip3 install -r documentation/requirements.txt
    # Build and install the server
    - cd server/ && poetry build --verbose && poetry install --verbose && pip3 install --verbose -e . && cd ../
    - cd documentation/
  script:
    - make html latexpdf
    - cp build/latex/*.pdf build/html/
    # Make sure the docs archive lands in the root of the repository
    - tar cf ../$CI_DOCS_ARCHIVE -C build/html/ .
  only:
    refs:
      - main
  artifacts:
    paths:
      - documentation/build
      - $CI_DOCS_ARCHIVE

docs-deploy:
  variables:
    GIT_STRATEGY: none
  dependencies:
    - docs-build
  stage: docs-deploy
  tags: ["docs"]
  script: echo 'Deploying docs'
  only:
    refs:
      - main
  artifacts:
    paths:
      - $CI_DOCS_ARCHIVE
