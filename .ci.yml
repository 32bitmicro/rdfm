image: $CI_REGISTRY_IMAGE:rdfm-ci-base-bookworm

variables:
  SSL_CERT_DIR: "certs"
  PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip
  GOROOT: ""
  SCALENODE_CPU: 2
  SCALENODE_RAM: 2048
  SCALENODE_DISK: 20

.ace: &ace
  tags: ['ace-x86_64']

.build:
  <<: *ace
  variables:
    JWT_SECRET: testsecret123123123
    POSTGRES_MAJOR_VERSION: 15
  before_script:
    - python -V
    - (apt update &&
        apt-get -y install make netcat-openbsd openssl telnet uuid-runtime xxd postgresql-$POSTGRES_MAJOR_VERSION postgresql-contrib &&
        service postgresql start &&
        ln -s /usr/lib/postgresql/$POSTGRES_MAJOR_VERSION/bin/initdb /bin/initdb &&
        ln -s /usr/lib/postgresql/$POSTGRES_MAJOR_VERSION/bin/postgres /bin/postgres)
    - (cd server && poetry build && poetry install)
    - (cd manager && poetry build && poetry install)
    - (cd devices/linux-client && sudo make install)
    - |
      if [[ $(losetup --list | wc -l) == 0 ]]; then
        dd if=/dev/zero of=blockfile bs=1M count=100
        losetup /dev/loop0 blockfile
        losetup /dev/loop1 blockfile
      fi
    - cp server/tests/etc_rdfm.conf /etc/rdfm/rdfm.conf
    - cat /etc/rdfm/rdfm.conf
    - (mkdir /var/lib/rdfm && cp server/tests/etc_rdfm.conf /var/lib/rdfm/rdfm.conf)
    - |
      echo "device_type=dummy" > /var/lib/rdfm/device_type
    - chmod -R 777 /etc/rdfm
    - chmod -R 777 /var/lib/rdfm
    - server/tests/certgen.sh


stages:
  - docs-build
  - docs-deploy
  - build
  - static-checks
  - local-tests

build:
  extends: .build
  stage: build
  script:
    - echo "Build finished"

python-pycodestyle-check:
  extends: .build
  stage: static-checks
  script:
    - (cd server && poetry run test-pycodestyle)
    - (cd manager && poetry run test-pycodestyle)
  only:
    refs:
      - merge_requests
      - main

python-mypy-check:
  extends: .build
  stage: static-checks
  script:
    - (cd server && poetry run test-mypy)
    - (cd manager && poetry run test-mypy)
  only:
    refs:
      - merge_requests
      - main
  allow_failure: true

test-package-api:
  extends: .build
  stage: local-tests
  script:
    - cd server
    - poetry run pytest tests/test-packages.py
  only:
    refs:
      - merge_requests
      - main

test-group-api:
  extends: .build
  stage: local-tests
  script:
    - cd server
    - poetry run pytest tests/test-groups.py
  only:
    refs:
      - merge_requests
      - main

test-server-update-policies:
  extends: .build
  stage: local-tests
  script:
    - cd server
    - poetry run pytest tests/test-update-policies.py --sqlite
    - poetry run pytest tests/test-update-policies.py --postgres
  only:
    refs:
      - merge_requests
      - main

test-server-update-resolver:
  extends: .build
  stage: local-tests
  script:
    - cd server
    - poetry run pytest tests/test-update-resolver.py
  only:
    refs:
      - merge_requests
      - main

test-server-update-api:
  extends: .build
  stage: local-tests
  script:
    - cd server
    - poetry run pytest tests/test-update-checker.py --sqlite
    - poetry run pytest tests/test-update-checker.py --postgres
  only:
    refs:
      - merge_requests
      - main

test-server-device-auth-api:
  extends: .build
  stage: local-tests
  variables:
    SCALENODE_RAM: 4096
  script:
    - cd server
    - poetry run pytest tests/test-server-auth.py --sqlite
    - poetry run pytest tests/test-server-auth.py --postgres
  only:
    refs:
      - merge_requests
      - main

test-server-s3-storage:
  extends: .build
  stage: local-tests
  script:
    - cd server
    - poetry run pytest tests/test-server-s3-storage.py
  only:
    refs:
      - merge_requests
      - main

test-server-management-auth:
  extends: .build
  stage: local-tests
  variables:
    SCALENODE_RAM: 4096
  script:
    - cd server
    - poetry run pytest tests/test-server-management-auth.py --sqlite
    - poetry run pytest tests/test-server-management-auth.py --postgres
  only:
    refs:
      - merge_requests
      - main

test-server-route-correctness:
  extends: .build
  stage: local-tests
  script:
    - cd server
    - poetry run pytest tests/test-server-route-correctness.py
  only:
    refs:
      - merge_requests
      - main

test-server-websocket:
  extends: .build
  stage: local-tests
  script:
    - cd server
    - poetry run pytest tests/test-server-ws.py --sqlite
    - poetry run pytest tests/test-server-ws.py --postgres
  only:
    refs:
      - merge_requests
      - main

test-manager:
  extends: .build
  stage: local-tests
  variables:
    SCALENODE_RAM: 4096
  script:
    - cd server
    - poetry run pytest tests/test-manager.py --sqlite
    - poetry run pytest tests/test-manager.py --postgres
  only:
    refs:
      - merge_requests
      - main

test-server-stress:
  extends: .build
  stage: local-tests
  variables:
    SCALENODE_CPU: 8
    SCALENODE_RAM: 32768
  script:
    - cd server
    - poetry run pytest tests/test-stress.py -vs
  only:
    refs:
      - merge_requests
      - main
  artifacts:
    paths:
      - server/tests/logs/*
    when: always

test-server-logs:
  extends: .build
  stage: local-tests
  script:
    - cd server
    - poetry run pytest tests/test-server-logs.py --sqlite
    - poetry run pytest tests/test-server-logs.py --postgres
  only:
    refs:
      - merge_requests
      - main

# ===== rdfm-client ===== #

build-rdfm-client:
  <<: *ace
  stage: build
  script:
    - cd devices/linux-client
    - make

test-rdfm-client:
  <<: *ace
  stage: local-tests
  script:
    # Build and install rdfm-artifact, which is required for the tests
    - cd tools/rdfm-artifact
    - make
    - make install
    - cd ../../devices/linux-client
    - make test
  only:
    refs:
      - merge_requests
      - main

test-rdfm-client-docker:
  <<: *ace
  stage: local-tests
  script:
    - export PATH=$HOME/go/bin/:$PATH
    # Build and install rdfm-artifact, which is required for the tests
    -  cd tools/rdfm-artifact
    -  make
    -  make install
    -  cd ../../devices/linux-client
    # The tests are running in a Docker container, install and set up
    # the Docker daemon
    - apt update
    - apt -qq -y --no-install-recommends install docker.io cgroupfs-mount crun fuse-overlayfs pigz ca-certificates
    - cgroupfs-mount
    - ../../common/docker/start-docker.sh
    # HACK: For CI runs, we have to replace the -it flag in docker run
    #       as this is not a real terminal.
    # HACK: We also comment out git invocations, as only a subfolder is mounted
    #       in the container, which would cause that call to fail. This is fine,
    #       as the invocation is only required when container UID != source UID
    #       (i.e, not in CI runs, where we run everything as root).
    - sed -i "s/\-it//g" ./scripts/test-docker/test-artifact-info.sh
    - sed -i "s/git/#git/g" ./scripts/test-docker/data/check-artifact-info.sh
    - sed -i "s/\-it//g" ./scripts/test-docker/test-deltas.sh
    - sed -i "s/git/#git/g" ./scripts/test-docker/data/check-delta-patching.sh
    - sed -i "s/\-it//g" ./scripts/test-docker/test-delta-over-http.sh
    # Run rdfm-client Docker tests
    - ./scripts/test-docker/test-artifact-info.sh
    - cd scripts/test-docker/
    - ./make-delta-samples.sh
    - cd ../../
    - ./scripts/test-docker/test-deltas.sh
    - ./scripts/test-docker/test-delta-over-http.sh
  only:
    refs:
      - merge_requests
      - main

# ===== rdfm-mcumgr-client ===== #

.mcumgr-client:
  <<: *ace

build-mcumgr-client:
  extends: .mcumgr-client
  stage: build
  before_script:
    # Currently CI ships Go 1.19, while the client needs 1.22+
    - wget --quiet -O - "https://go.dev/dl/go1.22.3.linux-amd64.tar.gz" | tar xz
  script:
    - export PATH=`pwd`/go/bin:$PATH
    - make -C devices/mcumgr-client
  artifacts:
    expire_in: 1 day
    paths:
      - devices/mcumgr-client/rdfm-mcumgr-client

build-mcumgr-test-samples:
  <<: *ace
  variables:
    SCALENODE_CPU: 4
    SCALENODE_RAM: 8192
    ZEPHYR_WORKSPACE: $CI_PROJECT_DIR/zephyr
    ZEPHYR_BASE: $CI_PROJECT_DIR/zephyr/zephyr
    ZEPHYR_SDK_INSTALL_DIR: $CI_PROJECT_DIR/zephyr/sdk
  stage: build
  before_script:
    - apt update
    - apt -qqy --no-install-recommends install cmake device-tree-compiler ninja-build
  script:
    - ./devices/mcumgr-client/tests/build/build_samples.sh
    - ls -la ./devices/mcumgr-client/tests/out/
  artifacts:
    expire_in: 1 day
    paths:
      - devices/mcumgr-client/tests/out
  only:
    refs:
      - merge_requests
      - main

test-mcumgr-client:
  extends: .mcumgr-client
  variables:
    SCALENODE_CPU: 4
    SCALENODE_RAM: 6144
    SCALENODE_DISK: 10
  dependencies:
    - build-mcumgr-client
    - build-mcumgr-test-samples
    - build-rdfm-artifact
  stage: local-tests
  script:
    - set -eo pipefail
    - apt update && apt -qqy --no-install-recommends install iproute2 git-lfs >/dev/null
    # NOTE: Currently Renode is tracked using LFS since we're using a custom
    #       build with support for both STM32F764 and NRF52840 flash controllers.
    #       If they get added into main, this can be replaced with official release
    #       `wget --quiet https://builds.renode.io/renode_1.X.Y_amd64.deb`
    - git lfs pull && apt -qqy --no-install-recommends install ./devices/mcumgr-client/tests/prebuilt/renode*.deb >/dev/null
    - mv tools/rdfm-artifact/rdfm-artifact /usr/bin/
    - mv devices/mcumgr-client/rdfm-mcumgr-client /usr/bin/
    - pushd server && pip3 install -e . && popd
    - pushd manager && pip3 install -e . && popd
    - cd devices/mcumgr-client
    # Run the test
    - ./tests/end2end/test.sh
  only:
    refs:
      - merge_requests
      - main

# ===== rdfm-artifact ===== #

.rdfm-artifact:
  <<: *ace
  before_script:
    - export PATH=$HOME/go/bin/:$PATH

build-rdfm-artifact:
  extends: .rdfm-artifact
  stage: build
  script:
    - cd tools/rdfm-artifact
    - make
  artifacts:
    paths:
      - tools/rdfm-artifact/rdfm-artifact

test-rdfm-artifact:
  extends: .rdfm-artifact
  stage: local-tests
  script:
    - cd tools/rdfm-artifact
    - make test
  only:
    refs:
      - merge_requests
      - main


# ===== rdfm-frontend ===== #

build-rdfm-frontend:
  <<: *ace
  image: node:20
  stage: static-checks
  script:
    - cd frontend
    - npm install
    - npm run format-check
    - npm run build
  only:
    refs:
      - merge_requests
      - main
  artifacts:
    paths:
      - frontend/dist

# ===== documentation ===== #

docs-build:
  <<: *ace
  stage: docs-build
  before_script:
    # Disable venvs and just install everything globally
    # The server module must be accessible by Sphinx to
    # properly autogenerate API documentation
    - poetry config virtualenvs.create false
    # Install doc building requirements
    - pip3 install -r documentation/requirements.txt
    # Build and install the server
    - (cd server/ && poetry build --verbose && poetry install --verbose && pip3 install --verbose -e .)
  script:
    - cd documentation/
    - make html latexpdf
    - cp build/latex/*.pdf build/html/
    # Make sure the docs archive lands in the root of the repository
    - tar cf ../$CI_DOCS_ARCHIVE -C build/html/ .
  only:
    refs:
      - merge_requests
      - main
  artifacts:
    paths:
      - documentation/build
      - $CI_DOCS_ARCHIVE

docs-deploy:
  variables:
    GIT_STRATEGY: none
  dependencies:
    - docs-build
  stage: docs-deploy
  tags: ["docs"]
  script: echo 'Deploying docs'
  only:
    refs:
      - main
  artifacts:
    paths:
      - $CI_DOCS_ARCHIVE
