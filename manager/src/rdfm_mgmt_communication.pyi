import socket
from _typeshed import Incomplete
from enum import Enum
from typing import Optional

HEADER_LENGTH: int
REQUEST_SCHEMA: Incomplete

class ClientType(Enum):
    USER: Incomplete
    DEVICE: str

class Client:
    name: Incomplete
    def __init__(self, name: str, socket: socket.socket) -> None: ...
    @staticmethod
    def registration_packet(name: str) -> dict: ...
    def get_server_addr(self) -> tuple[str, int]: ...
    def send(self, message: dict) -> None: ...
    def receive(self) -> Optional[dict]: ...

class Device(Client):
    metadata: Incomplete
    def __init__(self, name: str, socket: socket.socket) -> None: ...

class User(Client): ...

def receive_message(client: socket.socket) -> Optional[dict]: ...
def encode_json(to_encode: dict | str) -> bytes: ...
def decode_json(to_decode: bytes) -> dict | int: ...
def create_client(client_type: str, name: str, socket: socket.socket) -> Optional[Client]: ...
def create_listening_socket(hostname: str, port: int = ...) -> socket.socket: ...
def create_alert(alert_content: dict) -> dict: ...
