from request_models import *
import socket
from _typeshed import Incomplete
from typing import Optional

HEADER_LENGTH: int

class Client:
    name: Incomplete
    def __init__(self, name: str, socket: socket.socket) -> None: ...
    def get_server_addr(self) -> tuple[str, int]: ...
    def send(self, message: Request) -> None: ...
    def receive(self) -> Optional[Request]: ...

class FileTransfer:
    receiver: Incomplete
    sender: Incomplete
    file_path: Incomplete
    def __init__(self, receiver: Client, sender: Client, file_path: str) -> None: ...

class Device(Client):
    metadata: Incomplete
    def __init__(self, name: str, socket: socket.socket) -> None: ...

class User(Client):
    def __init__(self, name: str, socket: socket.socket) -> None: ...
    def prompt(self, message: str) -> None: ...

def receive(client: socket.socket) -> Optional[Request]: ...
def encode_json(to_encode: Request) -> bytes: ...
def decode_json(to_decode: bytes) -> Request | int: ...
def create_client(client_group: ClientGroups, name: str, socket: socket.socket) -> Optional[Client]: ...
def create_listening_socket(hostname: str, port: int = ..., encrypted: bool = ..., crt: str = ..., key: str = ...) -> socket.socket: ...
