"""Multiple groups per device

Revision ID: 2
Revises: 1
Create Date: 2024-06-05 12:21:47.465543

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '2'
down_revision: Union[str, None] = '1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    devices_groups = op.create_table('devices_groups',
    sa.Column('device_id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['device_id'], ['devices.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('device_id', 'group_id')
    )
    conn = op.get_bind()
    res = conn.execute(sa.text("select id, \"group\" from devices"))
    results = res.fetchall()

    group_assignments = [
        {'device_id': r[0], 'group_id': r[1]} for r in results
    ]

    # Insert group assignments into the new devices_groups table.
    op.bulk_insert(devices_groups, group_assignments)

    with op.batch_alter_table('devices', schema=None) as batch_op:
        batch_op.drop_column('group')

    with op.batch_alter_table('groups', schema=None) as batch_op:
        batch_op.add_column(sa.Column('priority', sa.Integer(), nullable=False,
                                      server_default="25"))

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('groups', schema=None) as batch_op:
        batch_op.drop_column('priority')

    with op.batch_alter_table('devices', schema=None) as batch_op:
        batch_op.add_column(sa.Column('group', sa.INTEGER(), nullable=True))
        batch_op.create_foreign_key(None, 'groups', ['group'], ['id'], ondelete='RESTRICT')

    op.drop_table('devices_groups')
    # ### end Alembic commands ###
